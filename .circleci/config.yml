# CircleCI configuration file

version: 2.1

orbs:
  node: circleci/node@5.0.2
  gcp-cli: circleci/gcp-cli@2.1.0

commands:
  # This command is used to validate that the files passed from the build to
  # the deploy stage are identical.
  hash_build:
    description: Compute hashes of the build directory for comparison
    steps:
      - run:
          name: Compute hashes of app/site/public directory
          command: >
            find app/site/public -type f -print0 |
            sort -z |
            xargs -0 sha256sum |
            tee >(cat 1>&2) |
            sha256sum

jobs:
  build:
    docker:
      - image: cimg/go:1.21-node

    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init

      # Environment
      - run:
          name: Print environment information
          command: |
            set -x
            go version
            go env
            node --version
            npm --version

      # Tooling install
      - run:
          name: Install tooling
          command: ./.circleci/install-tools

      # NPM install
      - node/install-packages

      # Install
      - restore_cache:
          keys:
            - v3-go-{{ arch }}-{{ checksum "app/go.sum" }}
            - v3-go-{{ arch }}
      - run:
          # NOTE: We do not install now, as compiling the web app requires the
          # embedded static assets to be built and present.
          name: Download Go app dependencies
          working_directory: 'app'
          command: go mod download -x

      # Site build
      - run:
          name: Build site
          command: npm run build

      # Tests
      - run:
          name: Run NPM lints
          command: npm run lint
      - run:
          name: Run NPM tests
          command: npm run test
      - run:
          name: Run Go tests
          command: npm run test:go
      - store_test_results:
          path: reports
      - store_artifacts:
          path: coverage
      - run:
          # ref: https://github.com/codecov/example-go/blob/master/.circleci/config.yml
          name: Upload coverage to Codecov
          command: |
            bash <(curl -s https://codecov.io/bash) -s coverage

        # Cache is saved after test execution to cache compliation artifacts.
      - save_cache:
          key: v3-go-{{ arch }}-{{ checksum "app/go.sum" }}
          paths:
            # Observed from `go env` output, above
            - ~/go
            - ~/.cache

      - hash_build
      - store_artifacts:
          path: app/site/public
      - persist_to_workspace:
          root: .
          paths:
            - app/site/public

  deploy:
    executor: gcp-cli/google
    steps:
      # Uses pre-defined environment variables:
      # https://circleci.com/developer/orbs/orb/circleci/gcp-cli#commands-initialize
      # The service account was provisioned according to the instructions here,
      # with the exception of scoping the iam.serviceAccountUser role to the
      # specific App Engine service account, and the compute.storageAdmin role
      # to the specific storage buckets, ref:
      # https://cloud.google.com/appengine/docs/standard/go/roles#recommended_role_for_application_deployment
      - gcp-cli/initialize
      - run:
          name: Disable gcloud CLI prompts
          command: gcloud config set core/disable_prompts true
      - checkout
      - attach_workspace:
          at: .
      - hash_build
      - run:
          name: Install additional dependencies
          command: |
            apt-get install -y jq
      - run:
          name: Deploy to App Engine
          command: ./scripts/deploy-appengine
      - persist_to_workspace:
          root: .
          paths:
            - VERSION*
      - run:
          name: Cleanup older versions in App Engine
          # We keep 10 versions as this is reasonably under 15, the max allowed
          # for the free tier:
          # https://cloud.google.com/appengine/docs/standard/go/an-overview-of-app-engine#limits
          command: ./scripts/cleanup-appengine default 10
      - when:
          # Only follow this step on the main branch
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            # https://developers.google.com/search/docs/advanced/sitemaps/build-sitemap
            - run:
                name: Submit sitemap to Google
                command: |
                  TARGET="$(cat app/site/public/robots.txt \
                          | grep 'Sitemap:' \
                          | awk '{print $2}')"
                  set -x
                  curl -v "https://www.google.com/ping?sitemap=$TARGET"

  verify:
    docker:
      - image: cimg/go:1.21-browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - node/install-packages
      - run:
          name: Run E2E tests
          command: npm run test:e2e
      - store_test_results:
          path: reports
      # NOTE: Coverage is not included here because we are not
      # testing any appliation code.

workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
      - verify:
          requires:
            - deploy
